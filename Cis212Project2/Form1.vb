'Jeffrey Martin
'CIS 212 Project 2

''' <summary>
''' Program launches from here and this controls all the users input and outpus
''' </summary>
Public Class Form1

#Region "Variables"

    'Instance of the classes of each table
    Dim companiesAndEmployeesTables As CompaniesAndEmployeesTables = New CompaniesAndEmployeesTables
    Dim employeesTable As EmployeesTable = New EmployeesTable
    Dim allContactRelatedTables As AllContactRelatedTables = New AllContactRelatedTables

    'Connection String to be passed
    Dim connString As String = "Server=DESKTOP-MBULVCJ\JEFFONE;Integrated Security=SSPI;Database=ScubaDealers;"

    'Global variables used as flags for what state the program is in
    Dim editingContactInfo As Boolean = False
    Dim addingNewContactMode As Boolean = False
    Dim searchByChosen As SearchByType = SearchByType.CompanyName

    'Enum to hold the type of search being done
    Enum SearchByType
        CompanyName
        LastName
    End Enum

#End Region

    ''' <summary>
    ''' Loads the form and sets the opening view
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Me.Size = New System.Drawing.Size(1000, 750)
        DisableSearchItems()

        DisableContactInfoLabels()
        SearchTextBox.Text = ""
        ErrorLabel.Text = ""
        EditAddLabel.Text = ""
    End Sub

#Region "OnClckEventHandlers"

    ''' <summary>
    ''' Multi button event handler to handle buttons that are always shown on the ControlPanelGroupBox
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub ButtonsOnControlPanelGroupBox_Click(sender As Object, e As EventArgs) Handles BrowseListButton.Click, SearchByCompanyNameButton.Click,
                                                                                 SearchByLastNameButton.Click, AddNewCompanyButton.Click,
                                                                                 TotalNumberOfContactsButton.Click
        'Holds the informattion that buttons was selected
        Dim buttonSelected As Button = sender

        'Every event that can create an error, will have this property cleared before run.
        ErrorLabel.Text = ""

        'Makes text of all the buttons white than the one selected is yellow
        resetFontColorOnButtons()
        buttonSelected.ForeColor = Color.Yellow

        'Make sure the searchTextbox is empty
        SearchTextBox.Text = ""

        'Handles what happens by the button selected
        Select Case (buttonSelected.Name)

            'Create a list of contacts to browes through
            Case BrowseListButton.Name

                'Set up the view needed for the contacts and fetch the data
                DisableSearchItems()
                BrowseDataGridView.Visible = True
                companiesAndEmployeesTables.FetchBrowseDataSet(connString)

                'Load any error message generated by the companiesAndEmployeesTables class
                ErrorLabel.Text = companiesAndEmployeesTables.ErrorMessage

                'Connect the Contacts to DataGridView, and add an error message if unsunsecsfull
                Try
                    BrowseDataGridView.DataSource = companiesAndEmployeesTables.dataSet.Tables(0)
                Catch ex As Exception
                    ErrorLabel.Text += ex.Message.ToString() & " Error "
                End Try

                'Load the search items for a company name, does not start searching yet.
            Case SearchByCompanyNameButton.Name

                SearchLabel.Text = "Enter Company Name"
                EnableSeachItems()
                searchByChosen = SearchByType.CompanyName

                'Load the search items for a last name, does not start searching yet.
            Case SearchByLastNameButton.Name

                SearchLabel.Text = "Enter Last Name"
                EnableSeachItems()
                searchByChosen = SearchByType.LastName

                'Load the items needed to add a new company contact, does not add the the contact yet.
            Case AddNewCompanyButton.Name

                'Temporary Boolean used if the form is in edit mode, to let the user choose if they wish to exit edit mode or not
                Dim allowChangeOfContactInformation As Boolean = True

                'If in editing mode allow the user to choose if to leave it or not
                If editingContactInfo = True Then
                    If MessageBox.Show("Editing has not been saved and all editing will be lost. Do you wish to continue?", "Loss of Data Warning",
                              MessageBoxButtons.YesNo) = DialogResult.No Then
                        allowChangeOfContactInformation = False
                    End If
                End If

                'If allowed to change the contact infromation load the items needed for adding a new contact
                If allowChangeOfContactInformation = True Then

                    DisableSearchItems()
                    ClearAllcontactRelatedATablesInfo()
                    EnableEditAddModeItems()
                    EditAddLabel.Text = "Add New Contact Information"
                    addingNewContactMode = True

                End If

            'Displays the total number of contacts
            Case TotalNumberOfContactsButton.Name

                SearchLabel.Visible = True
                employeesTable.CreateCount(connString)
                SearchLabel.Text = "Number of Contacts: " & employeesTable.contactCount
                ErrorLabel.Text = employeesTable.ErrorMessage

        End Select

    End Sub

    ''' <summary>
    ''' Searches for the type of seach chosen, with the value entered, and displays the results.
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub SearchButtonOnControlPanel_Click(sender As Object, e As EventArgs) Handles SearchButton.Click

        ErrorLabel.Text = ""

        'Check that somthing was entered into the textbox
        If SearchTextBox.Text.Trim() <> "" Then

            'Search items are no longer needed
            DisableSearchItems()
            BrowseDataGridView.Visible = True

            'Do the type of seach chosen. This style is used for future usability of adding other search types.
            Select Case (searchByChosen)

                'Search for the company name entered and display the results in the DataGridView.
                Case SearchByType.CompanyName

                    companiesAndEmployeesTables.FetchCompanyNameDataSet(connString, SearchTextBox.Text)

                    Try

                        BrowseDataGridView.DataSource = companiesAndEmployeesTables.dataSet.Tables(0)

                    Catch ex As Exception

                        ErrorLabel.Text += ex.Message.ToString() & " Error "

                    End Try

                'Search for the last name entered and display the results in the DataGridView.
                Case SearchByType.LastName

                    companiesAndEmployeesTables.FetchLastNameDataSet(connString, SearchTextBox.Text)

                    Try

                        BrowseDataGridView.DataSource = companiesAndEmployeesTables.dataSet.Tables(0)

                    Catch ex As Exception

                        ErrorLabel.Text += ex.Message.ToString() & " Error "

                    End Try

            End Select

            ErrorLabel.Text += companiesAndEmployeesTables.ErrorMessage

        Else 'Nothing was entered into the textbox, so inform the user.

            MsgBox("You must enter text to search by.")

        End If

    End Sub

    ''' <summary>
    ''' Get detailed contact infromation for the item clicked in the DataGridView
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">DataGridViewCellEventArgs</param>
    Private Sub BrowseDataGridView_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles BrowseDataGridView.CellClick

        'If the form is in edit mode, hold the user's choice if they wish to exit edit mode or not
        Dim allowChangeOfContactInformation As Boolean = True

        ErrorLabel.Text = ""

        'If in all ready in editing mode allow the user to choose if to leave it or not and set the reults.
        If editingContactInfo = True Then

            If MessageBox.Show("Editing has not been saved and all editing will be lost. Do you wish to continue?", "Loss of Data Warning",
                              MessageBoxButtons.YesNo) = DialogResult.No Then

                allowChangeOfContactInformation = False

            Else

                editingContactInfo = False

            End If

        End If

        'Fetch the detailed contact information of the contact clicked on and display the detailed information.
        If allowChangeOfContactInformation = True Then

            'Finds out which item has been chosen
            Dim companyId As Integer = BrowseDataGridView.CurrentRow.Cells(3).Value

            'Fetches the contact information and displays it.
            allContactRelatedTables.FetchSingleContactInclusiveData(connString, companyId)
            ErrorLabel.Text = allContactRelatedTables.ErrorMessage
            EnableContactInfoItems()
            UpdateAllContactRelatedTextBoxes()

        End If

    End Sub


#Region "ContactButtons"

    ''' <summary>
    ''' Switches the detailed contact infromation into edit mode
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub EnableEditButton_Click(sender As Object, e As EventArgs) Handles EnableEditButton.Click

        EnableEditAddModeItems()
        EditAddLabel.Text = "Edit Contact Information"

    End Sub

    ''' <summary>
    ''' Saves valid information for a contact 
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub SaveAndExitEditingModeButton_Click(sender As Object, e As EventArgs) Handles SaveAndExitModeButton.Click

        'Every event that can create an error, will have this property cleared before run.
        ErrorLabel.Text = ""

        Dim validatedData As Boolean = True

        'Validate the data to make sure that there is something in the CompnayName field and that all
        'fields do not have more than one apostrophry.
        Select Case (True)
            Case (CompanyNameTextBox.Text.Trim() = "")
                MsgBox("Need to have a Company Name to save a contact.")
                validatedData = False

            Case InStr(CompanyNameTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Company Name input field.")
                CompanyNameTextBox.Focus()
                validatedData = False

            Case InStr(LastNameTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Last Name input field.")
                validatedData = False
                LastNameTextBox.Focus()

            Case InStr(FirstNameTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the First Name input field.")
                validatedData = False
                FirstNameTextBox.Focus()

            Case InStr(PhoneNumberTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Phonenumber input field.")
                validatedData = False
                PhoneNumberTextBox.Focus()

            Case InStr(Address1TextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Address 1 input field.")
                validatedData = False
                Address1TextBox.Focus()

            Case InStr(Address2TextBox7.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Address 2 input field.")
                validatedData = False
                Address2TextBox7.Focus()

            Case InStr(CityTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the City input field.")
                validatedData = False
                CityTextBox.Focus()

            Case InStr(StateTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the State input field.")
                validatedData = False
                StateTextBox.Focus()

            Case InStr(PostalCodeTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Postal code input field.")
                validatedData = False
                PostalCodeTextBox.Focus()

        End Select

        'Now that the data is valid save it.
        If validatedData Then

            'Place data from input fields in the companiesAndEmployeesTables class.
            UpdateAllContactRelatedTablesFields()

            'Check if in Adding a new conact mode
            If addingNewContactMode = True Then

                'Add the contact to the database
                allContactRelatedTables.AddNewContact(connString)
                ErrorLabel.Text += allContactRelatedTables.ErrorMessage

                'Check if the CompanyName along with the LastName is in the database to confirm that it has been added.
                If companiesAndEmployeesTables.CheckIfCompanyInDatabase(connString, CompanyNameTextBox.Text, LastNameTextBox.Text) Then

                    'Exit adding a new contact mode and reset the form
                    DisableEditAddModeItems()
                    DisableEditingContactInfo()
                    resetFontColorOnButtons()

                Else

                    ErrorLabel.Text += "aaaError could not add as a new contact."

                End If

            Else 'In Editing mode

                'Disable editing mode 
                DisableEditAddModeItems()
                DisableEditingContactInfo()

                'Update the all the tables used for a contact
                allContactRelatedTables.UpdateContactInformation(connString)
                ErrorLabel.Text += allContactRelatedTables.ErrorMessage

            End If

            'Grab any error that may have happened during the If statement
            ErrorLabel.Text += allContactRelatedTables.ErrorMessage

            'If there is not an error display the success statement to the user.
            If ErrorLabel.Text = "" Then

                If addingNewContactMode = True Then

                    MsgBox("New Contact has been added.")

                Else

                    MsgBox("Contact information has been updated.")

                End If

                'As the information is not longer accurate, disable the DataGridView.
                BrowseDataGridView.Visible = False
                resetFontColorOnButtons()


            End If

            'Exit adding a new contact mode
            addingNewContactMode = False

        End If

    End Sub

    ''' <summary>
    ''' Exit adding contact or edit contact mode
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub CancelButton_Click(sender As Object, e As EventArgs) Handles CancelButton.Click

        'Clear out user infromation label
        EditAddLabel.Text = ""


        If addingNewContactMode = True Then

            'Exit the adding a new contact mode and rest the form.

            DisableEditAddModeItems()
            resetFontColorOnButtons()

        Else

            'Exit contact mode and change the buttons to reflect viewing contact infromation.
            DisableEditingContactInfo()
            EnableContactInfoItems()
            UpdateAllContactRelatedTextBoxes()

        End If

    End Sub

    ''' <summary>
    ''' Delete the detailed contact information from all tables in the database
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub DeleteButton_Click(sender As Object, e As EventArgs) Handles DeleteButton.Click

        ErrorLabel.Text = ""

        'Confirm that the user wants to delete the contact
        If MessageBox.Show("All of this contact information will be deleted. Do you wish to continue?", "Loss of Data Warning",
                              MessageBoxButtons.YesNo) = DialogResult.Yes Then

            'Delete the contact
            allContactRelatedTables.DeleteContact(connString)
            ErrorLabel.Text = allContactRelatedTables.ErrorMessage


            If ErrorLabel.Text = "" Then

                'Give user Sucess mesage and reset the form
                MsgBox("Contact information has been deleted.")
                BrowseDataGridView.Visible = False
                ContactInfoPanel.Visible = False
                resetFontColorOnButtons()
                DisableContactInfoLabels()

            End If

        End If

    End Sub
#End Region


#End Region

#Region "DisplaySettingsMethods"

    ''' <summary>
    ''' Enables items used when a seach it going to be done.
    ''' </summary>
    Private Sub EnableSeachItems()

        SearchLabel.Visible = True
        SearchButton.Visible = True
        SearchTextBox.Visible = True
        SearchTextBox.Focus()

    End Sub

    ''' <summary>
    ''' Disable items used when a seach is going to be done.
    ''' </summary>
    Private Sub DisableSearchItems()

        SearchLabel.Visible = False
        SearchButton.Visible = False
        SearchTextBox.Visible = False
        BrowseDataGridView.Visible = False

    End Sub

    ''' <summary>
    ''' Enable items used when in Edit contact or add contact mode.
    ''' </summary>
    Private Sub EnableEditAddModeItems()

        EnableEditingContactInfo()
        ContactInfoPanel.Visible = True
        EnableEditButton.Visible = False
        DeleteButton.Visible = False
        SaveAndExitModeButton.Visible = True
        CancelButton.Visible = True

    End Sub

    ''' <summary>
    ''' Disable items used when in Edit contact or add contact mode
    ''' and set both modes to false.
    ''' </summary>
    Private Sub DisableEditAddModeItems()

        addingNewContactMode = False
        editingContactInfo = False
        ContactInfoPanel.Visible = False
        EnableEditButton.Visible = False
        DeleteButton.Visible = False
        SaveAndExitModeButton.Visible = False
        CancelButton.Visible = False

    End Sub

    ''' <summary>
    ''' Set the color of text for buttons on the ControlPanelGroupBox to white
    ''' to indicate not selected.
    ''' </summary>
    Private Sub resetFontColorOnButtons()

        BrowseListButton.ForeColor = Color.White
        SearchByCompanyNameButton.ForeColor = Color.White
        SearchByLastNameButton.ForeColor = Color.White
        AddNewCompanyButton.ForeColor = Color.White
        TotalNumberOfContactsButton.ForeColor = Color.White

    End Sub

    ''' <summary>
    ''' Enable items used for detailed contact information.
    ''' </summary>
    Private Sub EnableContactInfoItems()

        DisableEditingContactInfo()
        EditAddLabel.Visible = True
        ContactInfoPanel.Visible = True
        EnableEditButton.Visible = True
        DeleteButton.Visible = True
        SaveAndExitModeButton.Visible = False
        CancelButton.Visible = False

    End Sub

    ''' <summary>
    ''' Disable items used for detailed contact information.
    ''' </summary>
    Private Sub DisableContactInfoLabels()

        ContactInfoPanel.Visible = False
        EnableEditButton.Visible = False
        DeleteButton.Visible = False
        SaveAndExitModeButton.Visible = False
        CancelButton.Visible = False

    End Sub


#End Region

#Region "UpdateMultiVariableMethods"

    ''' <summary>
    ''' Enable textBox.Text fields to be eddited.
    ''' ContactTypeTextBox.Text and PhoneTypeTextBox.Text
    ''' are set to the default values. Done here so if
    ''' enabled in the future, it is in the correct location.
    ''' </summary>
    Private Sub EnableEditingContactInfo()

        editingContactInfo = True
        CompanyNameTextBox.ReadOnly = False
        LastNameTextBox.ReadOnly = False
        FirstNameTextBox.ReadOnly = False
        ContactTypeTextBox.ReadOnly = True
        ContactTypeTextBox.Text = "Owner"
        PhoneNumberTextBox.ReadOnly = False
        PhoneTypeTextBox.ReadOnly = True
        PhoneTypeTextBox.Text = "Sales"
        Address1TextBox.ReadOnly = False
        Address2TextBox7.ReadOnly = False
        CityTextBox.ReadOnly = False
        StateTextBox.ReadOnly = False
        PostalCodeTextBox.ReadOnly = False

    End Sub


    ''' <summary>
    ''' Disable textBox.Text fields to be eddited.
    ''' </summary>
    Private Sub DisableEditingContactInfo()

        editingContactInfo = False
        CompanyNameTextBox.ReadOnly = True
        LastNameTextBox.ReadOnly = True
        FirstNameTextBox.ReadOnly = True
        ContactTypeTextBox.ReadOnly = True
        PhoneNumberTextBox.ReadOnly = True
        PhoneTypeTextBox.ReadOnly = True
        Address1TextBox.ReadOnly = True
        Address2TextBox7.ReadOnly = True
        CityTextBox.ReadOnly = True
        StateTextBox.ReadOnly = True
        PostalCodeTextBox.ReadOnly = True

    End Sub

    ''' <summary>
    ''' Get the detail contact information from the allContactRelatedTables and place into the TextBoxes
    ''' </summary>
    Private Sub UpdateAllContactRelatedTextBoxes()

        CompanyNameTextBox.Text = allContactRelatedTables.companyName
        LastNameTextBox.Text = allContactRelatedTables.lastName
        FirstNameTextBox.Text = allContactRelatedTables.firstName
        ContactTypeTextBox.Text = allContactRelatedTables.employeeTypesDescription
        PhoneNumberTextBox.Text = allContactRelatedTables.phoneNumber
        PhoneTypeTextBox.Text = allContactRelatedTables.phoneType
        Address1TextBox.Text = allContactRelatedTables.address1
        Address2TextBox7.Text = allContactRelatedTables.address2
        CityTextBox.Text = allContactRelatedTables.city
        StateTextBox.Text = allContactRelatedTables.state
        PostalCodeTextBox.Text = allContactRelatedTables.postalCode

    End Sub

    ''' <summary>
    '''  Get the detail contact information from the TextBoxes and place into the allContactRelatedTables
    ''' </summary>
    Private Sub UpdateAllContactRelatedTablesFields()

        allContactRelatedTables.companyName = CompanyNameTextBox.Text
        allContactRelatedTables.lastName = LastNameTextBox.Text
        allContactRelatedTables.firstName = FirstNameTextBox.Text
        allContactRelatedTables.employeeTypesDescription = ContactTypeTextBox.Text
        allContactRelatedTables.phoneNumber = PhoneNumberTextBox.Text
        allContactRelatedTables.phoneType = PhoneTypeTextBox.Text
        allContactRelatedTables.address1 = Address1TextBox.Text
        allContactRelatedTables.address2 = Address2TextBox7.Text
        allContactRelatedTables.city = CityTextBox.Text
        allContactRelatedTables.state = StateTextBox.Text
        allContactRelatedTables.postalCode = PostalCodeTextBox.Text

    End Sub

    ''' <summary>
    ''' Clears out all of the TextBoxes used for detail contact infromatin
    ''' </summary>
    Private Sub ClearAllcontactRelatedATablesInfo()

        CompanyNameTextBox.Text = ""
        LastNameTextBox.Text = ""
        FirstNameTextBox.Text = ""
        ContactTypeTextBox.Text = ""
        PhoneNumberTextBox.Text = ""
        PhoneTypeTextBox.Text = ""
        Address1TextBox.Text = ""
        Address2TextBox7.Text = ""
        CityTextBox.Text = ""
        StateTextBox.Text = ""
        PostalCodeTextBox.Text = ""

    End Sub

#End Region

End Class
