'Jeffrey Martin
'CIS 212 Project 2

''' <summary>
''' Program launches from here and this controls all the users input and outpus
''' </summary>
Public Class Form1

#Region "Variables"

    'Instance of the classes of each table
    Dim companiesAndEmployeesTables As CompaniesAndEmployeesTables = New CompaniesAndEmployeesTables
    Dim employeesTable As EmployeesTable = New EmployeesTable
    Dim allContactRelatedTables As AllContactRelatedTables = New AllContactRelatedTables

    'Connection String to be passed
    Dim connString As String = "Server=DESKTOP-MBULVCJ\JEFFONE;Integrated Security=SSPI;Database=ScubaDealers;"

    'Global variables used as flags for what state the program is in
    Dim editingContactInfo As Boolean = False
    Dim addingNewContact As Boolean = False
    Dim searchByChosen As SearchByType = SearchByType.CompanyName

    'Enum to hold the type of search being done
    Enum SearchByType
        CompanyName
        LastName
    End Enum

#End Region

    ''' <summary>
    ''' Loads the form and sets the opening view
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Me.Size = New System.Drawing.Size(1000, 750)
        DisableSearchItems()
        DisableContactInfoLabels()
        SearchTextBox.Text = ""
        ErrorLabel.Text = ""
        EditAddLabel.Text = ""
    End Sub

#Region "OnClckEventHandlers"

    ''' <summary>
    ''' Multi button event handler to handle buttons that are always shown on the ControlPanelGroupBox
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub ButtonsOnControlPanelGroupBox_Click(sender As Object, e As EventArgs) Handles BrowseListButton.Click, SearchByCompanyNameButton.Click,
                                                                                 SearchByLastNameButton.Click, AddNewCompanyButton.Click,
                                                                                 TotalNumberOfContactsButton.Click
        'Holds the informattion that buttons was selected
        Dim buttonSelected As Button = sender

        'Every event that can create an error, will have this property cleared before run.
        ErrorLabel.Text = ""

        'Makes text of all the buttons white than the one selected is yellow
        resetFontColorOnButtons()
        buttonSelected.ForeColor = Color.Yellow

        'Make sure the searchTextbox is empty
        SearchTextBox.Text = ""

        'Handles what happens by the button selected
        Select Case (buttonSelected.Name)

            'Create a list of the items to browes through
            Case BrowseListButton.Name
                'Search for not selected, so disable search items
                DisableSearchItems()
                'Make visible as control is going to be used
                BrowseDataGridView.Visible = True
                'Using the companiesAndEmployeesTables class get the dataSet
                companiesAndEmployeesTables.FetchBrowseDataSet(connString)
                'Load any error message generated by the companiesAndEmployeesTables class
                ErrorLabel.Text = companiesAndEmployeesTables.ErrorMessage

                'Connect the DataSet to DataGridView, and add an error message if unsunsecsfull
                Try
                    BrowseDataGridView.DataSource = companiesAndEmployeesTables.dataSet.Tables(0)
                Catch ex As Exception
                    ErrorLabel.Text += ex.Message.ToString() & " Error "
                End Try

                'Load the search items for a company name
            Case SearchByCompanyNameButton.Name
                'Create the text to let the user know that they will be searching for a company name
                SearchLabel.Text = "Enter Company Name"
                'Load the search items on the form
                EnableSeachItems()
                'Set the search type to companyName
                searchByChosen = SearchByType.CompanyName

                'Load the search items for a last name
            Case SearchByLastNameButton.Name
                'Create the text to let the user know that they will be searching for a last name
                SearchLabel.Text = "Enter Last Name"
                'Load the search items on the form
                EnableSeachItems()
                'Set the search type to LastName
                searchByChosen = SearchByType.LastName

                'Load the items needed to add a new company
            Case AddNewCompanyButton.Name

                'Temporary Boolean used if the form is in edit mode, to let the user choose if they wish to exit edit mode or not
                Dim allowChangeOfContactInformation As Boolean = True

                'If in editing mode allow the user to choose if to leave it or not
                If editingContactInfo = True Then
                    If MessageBox.Show("Editing has not been saved and all editing will be lost. Do you wish to continue?", "Loss of Data Warning",
                              MessageBoxButtons.YesNo) = DialogResult.No Then
                        allowChangeOfContactInformation = False
                    End If
                End If

                'If allowed to change the contact infromation load the items needed for adding a new contact
                If allowChangeOfContactInformation = True Then
                    'Search items are not needed
                    DisableSearchItems()
                    'Clear out all the data that may be stored to get ready for the user to input.
                    ClearAllcontactRelatedATablesInfo()

                    'Enable the form and buttons needed for editing.
                    EnableEditAddModeItems()
                    EditAddLabel.Text = "Add New Contact Information"

                    'Enter adding a new contact mode
                    addingNewContact = True
                End If

            'Displays the total number of contacts
            Case TotalNumberOfContactsButton.Name
                'Make label visible where the results will be displayed
                SearchLabel.Visible = True
                'Go to employeesTable class and get the result
                employeesTable.CreateCount(connString)
                'Output the result
                SearchLabel.Text = "Number of Contacts: " & employeesTable.contactCount
                'Display any errors that might have happened.
                ErrorLabel.Text = employeesTable.ErrorMessage

        End Select

    End Sub

    ''' <summary>
    ''' AFter a type of seach has been chosen, this will exucte that type of search
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub SearchButtonOnControlPanel_Click(sender As Object, e As EventArgs) Handles SearchButton.Click
        'Every event that can create an error, will have this property cleared before run.
        ErrorLabel.Text = ""

        'Check that somthing was entered into the textbox
        If SearchTextBox.Text.Trim() <> "" Then

            'Search items are no longer needed
            DisableSearchItems()
            BrowseDataGridView.Visible = True

            'Do the type of seach chosen. This style is used for future usability of adding other search types.
            Select Case (searchByChosen)

                'Search for company name
                Case SearchByType.CompanyName

                    'Get the DataSet for the company name from the companiesAndEmployeesTables class.
                    companiesAndEmployeesTables.FetchCompanyNameDataSet(connString, SearchTextBox.Text)

                    'Attach the DataSet to the DataGridView.
                    Try
                        BrowseDataGridView.DataSource = companiesAndEmployeesTables.dataSet.Tables(0)
                    Catch ex As Exception
                        'Display any errors that might have happened.
                        ErrorLabel.Text += ex.Message.ToString() & " Error "
                    End Try

                'Seach for the last name
                Case SearchByType.LastName

                    'Get the DataSet for the last name from the companiesAndEmployeesTables class.
                    companiesAndEmployeesTables.FetchLastNameDataSet(connString, SearchTextBox.Text)

                    'Attach the DataSet to the DataGridView.
                    Try
                        BrowseDataGridView.DataSource = companiesAndEmployeesTables.dataSet.Tables(0)
                    Catch ex As Exception
                        'Display any errors that might have happened.
                        ErrorLabel.Text += ex.Message.ToString() & " Error "
                    End Try

            End Select
            'Display any errors that might have happened.
            ErrorLabel.Text += companiesAndEmployeesTables.ErrorMessage

            'Nothing was entered into the textbox, so inform the user.
        Else
            MsgBox("You must enter text to search by.")

        End If

    End Sub

    ''' <summary>
    ''' Get detailed contact infromation for the item clicked in the DataGridView
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">DataGridViewCellEventArgs</param>
    Private Sub BrowseDataGridView_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles BrowseDataGridView.CellClick

        'Temporary Boolean used if the form is in edit mode, to let the user choose if they wish to exit edit mode or not
        Dim allowChangeOfContactInformation As Boolean = True

        'Every event that can create an error, will have this property cleared before run.
        ErrorLabel.Text = ""

        'If in all ready in editing mode allow the user to choose if to leave it or not
        If editingContactInfo = True Then
            If MessageBox.Show("Editing has not been saved and all editing will be lost. Do you wish to continue?", "Loss of Data Warning",
                              MessageBoxButtons.YesNo) = DialogResult.No Then
                allowChangeOfContactInformation = False

            Else
                editingContactInfo = False

            End If

        End If

        'If allowed to change the contact infromation load the items needed for editing a contact
        If allowChangeOfContactInformation = True Then

            'Load items needed for detailed contact information
            SaveAndExitModeButton.Visible = False
            CancelButton.Visible = False

            'Get and hold the company ID of the item in the DataGridView
            Dim companyId As Integer = BrowseDataGridView.CurrentRow.Cells(3).Value

            'Load the data into the properties of the allContactRelatedTables class.
            allContactRelatedTables.FetchSingleContactInclusiveData(connString, companyId)

            'Display any errors that may have happened.
            ErrorLabel.Text = allContactRelatedTables.ErrorMessage

            'Make the editing items visible.
            EnableContactInfoItems()

            'Place the detailed contact infromation in the editing items.
            UpdateAllContactRelatedInfo()

        End If

    End Sub


#Region "ContactButtons"
    ''' <summary>
    ''' Places the detailed contact inforamtion into edit mode.
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub EnableEditButton_Click(sender As Object, e As EventArgs) Handles EnableEditButton.Click

        'Display Information needed to editing  a contact
        EnableEditAddModeItems()
        EditAddLabel.Text = "Edit Contact Information"

    End Sub

    ''' <summary>
    ''' Saves valid information for a contact 
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub SaveAndExitEditingModeButton_Click(sender As Object, e As EventArgs) Handles SaveAndExitModeButton.Click
        'Every event that can create an error, will have this property cleared before run.
        ErrorLabel.Text = ""

        Dim validatedData As Boolean = True

        Select Case (True)
            Case (CompanyNameTextBox.Text.Trim() = "")
                MsgBox("XXXXXXNeed to have a Company Name to save a contact.")
                validatedData = False

            Case InStr(CompanyNameTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Company Name input field.")
                CompanyNameTextBox.Focus()
                validatedData = False

            Case InStr(LastNameTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Last Name input field.")
                validatedData = False
                LastNameTextBox.Focus()

            Case InStr(FirstNameTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the First Name input field.")
                validatedData = False
                FirstNameTextBox.Focus()

            Case InStr(PhoneNumberTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Phonenumber input field.")
                validatedData = False
                PhoneNumberTextBox.Focus()

            Case InStr(Address1TextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Address 1 input field.")
                validatedData = False
                Address1TextBox.Focus()

            Case InStr(Address2TextBox7.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Address 2 input field.")
                validatedData = False
                Address2TextBox7.Focus()

            Case InStr(CityTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the City input field.")
                validatedData = False
                CityTextBox.Focus()

            Case InStr(StateTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the State input field.")
                validatedData = False
                StateTextBox.Focus()

            Case InStr(PostalCodeTextBox.Text.Trim(), "''")
                MsgBox("Can not have two apostraphies in a row in the Postal code input field.")
                validatedData = False
                PostalCodeTextBox.Focus()


        End Select

        'Validate information has been entered
        If validatedData Then

            MsgBox("Inside True")

            'Place data from input fields in the companiesAndEmployeesTables class.
            UpdateAllContactRelatedTablesFields()

            'Check if in Adding a new conact mode
            If addingNewContact = True Then

                'Add the contact to the database
                allContactRelatedTables.AddNewContact(connString)

                'Check if the CompanyName along with the LastName is in the database to confirm that it has been added.
                If companiesAndEmployeesTables.CheckIfCompanyInDatabase(connString, CompanyNameTextBox.Text, LastNameTextBox.Text) Then

                    'Start exiting adding a new contact mode (Flag is set at end of method)
                    DisableEditAddModeItems()
                    DisableEditingContactInfo()
                    resetFontColorOnButtons()

                Else

                    'Display the error that happened.
                    ErrorLabel.Text += "Error could not add as a new contact."

                End If

            Else 'In Editing mode

                'Disable editing mode 
                DisableEditAddModeItems()
                DisableEditingContactInfo()

                'Update the all the tables used for a contact
                allContactRelatedTables.UpdateContactInformation(connString)

            End If

            'Grab any error that may have happened during the If statement
            ErrorLabel.Text += allContactRelatedTables.ErrorMessage

            'If there is not an error display the success statement to the user.
            If ErrorLabel.Text = "" Then

                If addingNewContact = True Then

                    MsgBox("New Contact has been added.")

                Else

                    MsgBox("Contact information has been updated.")

                End If

                'As the information is not longer accurate, disable the DataGridView.
                BrowseDataGridView.Visible = False

            End If

            'Exit adding a new contact mode
            addingNewContact = False

        Else

            MsgBox("Inside False")


        End If

    End Sub

    ''' <summary>
    ''' Exit adding contact or edit contact mode
    ''' </summary>
    ''' <param name="sender">Object</param>
    ''' <param name="e">EventArgs</param>
    Private Sub CancelButton_Click(sender As Object, e As EventArgs) Handles CancelButton.Click

        'Clear out user infromation label
        EditAddLabel.Text = ""


        If addingNewContact = True Then

            'Exit the adding a new contact mode and rest the form.

            DisableEditAddModeItems()
            resetFontColorOnButtons()

        Else

            'Exit contact mode and change the buttons to reflect viewing contact infromation.
            DisableEditingContactInfo()
            EnableContactInfoItems()
            UpdateAllContactRelatedInfo()

        End If

    End Sub
    Private Sub DeleteButton_Click(sender As Object, e As EventArgs) Handles DeleteButton.Click
        'Every event that can create an error, will have this property cleared before run.
        ErrorLabel.Text = ""
        If MessageBox.Show("All of this contact information will be deleted. Do you wish to continue?", "Loss of Data Warning",
                              MessageBoxButtons.YesNo) = DialogResult.Yes Then
            allContactRelatedTables.DeleteContact(connString)
            ErrorLabel.Text = allContactRelatedTables.ErrorMessage
            If ErrorLabel.Text = "" Then
                'Display any errors that might have happened.
                MsgBox("Contact information has been deleted.")
                BrowseDataGridView.Visible = False
                ContactInfoPanel.Visible = False
                resetFontColorOnButtons()
                DisableContactInfoLabels()
            End If
        End If
    End Sub
#End Region


#End Region

#Region "DisplaySettingsMethods"

    Private Sub EnableSeachItems()
        SearchLabel.Visible = True
        SearchButton.Visible = True
        SearchTextBox.Visible = True
        SearchTextBox.Focus()
    End Sub

    Private Sub DisableSearchItems()
        SearchLabel.Visible = False
        SearchButton.Visible = False
        SearchTextBox.Visible = False
        BrowseDataGridView.Visible = False
    End Sub

    Private Sub EnableEditAddModeItems()
        EnableEditingContactInfo()
        ContactInfoPanel.Visible = True
        EnableEditButton.Visible = False
        DeleteButton.Visible = False
        SaveAndExitModeButton.Visible = True
        CancelButton.Visible = True
    End Sub

    Private Sub DisableEditAddModeItems()
        addingNewContact = False
        editingContactInfo = False
        ContactInfoPanel.Visible = False
        EnableEditButton.Visible = False
        DeleteButton.Visible = False
        SaveAndExitModeButton.Visible = False
        CancelButton.Visible = False
    End Sub

    Private Sub resetFontColorOnButtons()
        BrowseListButton.ForeColor = Color.White
        SearchByCompanyNameButton.ForeColor = Color.White
        SearchByLastNameButton.ForeColor = Color.White
        AddNewCompanyButton.ForeColor = Color.White
        TotalNumberOfContactsButton.ForeColor = Color.White
    End Sub

    Private Sub DisableContactInfoLabels()

        ContactInfoPanel.Visible = False
        EnableEditButton.Visible = False
        DeleteButton.Visible = False
        SaveAndExitModeButton.Visible = False
        CancelButton.Visible = False

    End Sub

    Private Sub EnableContactInfoItems()
        EditAddLabel.Visible = True
        ContactInfoPanel.Visible = True
        EnableEditButton.Visible = True
        DeleteButton.Visible = True
        SaveAndExitModeButton.Visible = False
        CancelButton.Visible = False

    End Sub

    Private Sub DisableEditingContactInfo()
        editingContactInfo = False
        CompanyNameTextBox.ReadOnly = True
        LastNameTextBox.ReadOnly = True
        FirstNameTextBox.ReadOnly = True
        ContactTypeTextBox.ReadOnly = True
        PhoneNumberTextBox.ReadOnly = True
        PhoneTypeTextBox.ReadOnly = True
        Address1TextBox.ReadOnly = True
        Address2TextBox7.ReadOnly = True
        CityTextBox.ReadOnly = True
        StateTextBox.ReadOnly = True
        PostalCodeTextBox.ReadOnly = True
    End Sub

    Private Sub EnableEditingContactInfo()

        editingContactInfo = True
        CompanyNameTextBox.ReadOnly = False
        LastNameTextBox.ReadOnly = False
        FirstNameTextBox.ReadOnly = False
        ContactTypeTextBox.ReadOnly = True
        ContactTypeTextBox.Text = "Owner"
        PhoneNumberTextBox.ReadOnly = False
        PhoneTypeTextBox.ReadOnly = True
        PhoneTypeTextBox.Text = "Sales"
        Address1TextBox.ReadOnly = False
        Address2TextBox7.ReadOnly = False
        CityTextBox.ReadOnly = False
        StateTextBox.ReadOnly = False
        PostalCodeTextBox.ReadOnly = False
    End Sub

    Private Sub EnableEditingButtions()
        SaveAndExitModeButton.Visible = True
        CancelButton.Visible = True
        EnableEditButton.Visible = False
        DeleteButton.Visible = False
    End Sub

#End Region

#Region "UpdateMultiVariableMethods"
    Private Sub UpdateAllContactRelatedInfo()
        CompanyNameTextBox.Text = allContactRelatedTables.companyName
        LastNameTextBox.Text = allContactRelatedTables.lastName
        FirstNameTextBox.Text = allContactRelatedTables.firstName
        ContactTypeTextBox.Text = allContactRelatedTables.employeeTypesDescription
        PhoneNumberTextBox.Text = allContactRelatedTables.phoneNumber
        PhoneTypeTextBox.Text = allContactRelatedTables.phoneType
        Address1TextBox.Text = allContactRelatedTables.address1
        Address2TextBox7.Text = allContactRelatedTables.address2
        CityTextBox.Text = allContactRelatedTables.city
        StateTextBox.Text = allContactRelatedTables.state
        PostalCodeTextBox.Text = allContactRelatedTables.postalCode
    End Sub
    Private Sub UpdateAllContactRelatedTablesFields()
        allContactRelatedTables.companyName = CompanyNameTextBox.Text
        allContactRelatedTables.lastName = LastNameTextBox.Text
        allContactRelatedTables.firstName = FirstNameTextBox.Text
        allContactRelatedTables.employeeTypesDescription = ContactTypeTextBox.Text
        allContactRelatedTables.phoneNumber = PhoneNumberTextBox.Text
        allContactRelatedTables.phoneType = PhoneTypeTextBox.Text
        allContactRelatedTables.address1 = Address1TextBox.Text
        allContactRelatedTables.address2 = Address2TextBox7.Text
        allContactRelatedTables.city = CityTextBox.Text
        allContactRelatedTables.state = StateTextBox.Text
        allContactRelatedTables.postalCode = PostalCodeTextBox.Text

    End Sub
    Private Sub ClearAllcontactRelatedATablesInfo()
        CompanyNameTextBox.Text = ""
        LastNameTextBox.Text = ""
        FirstNameTextBox.Text = ""
        ContactTypeTextBox.Text = ""
        PhoneNumberTextBox.Text = ""
        PhoneTypeTextBox.Text = ""
        Address1TextBox.Text = ""
        Address2TextBox7.Text = ""
        CityTextBox.Text = ""
        StateTextBox.Text = ""
        PostalCodeTextBox.Text = ""
    End Sub

#End Region


End Class
